import org.gradle.internal.logging.LoggingOutputInternal
import org.gradle.internal.logging.events.OutputEvent
import org.gradle.internal.logging.events.OutputEventListener

tasks.withType(Javadoc) {
    def exceptions = []
    doFirst {
        gradle.services.get(LoggingOutputInternal).addOutputEventListener(new OutputEventListener() {
            void onOutput(OutputEvent event) {
                if (event.toString() =~ " warning: ") {
                    exceptions << new GradleException("Javadoc warning: ${event.toString()}")
                }
            }
        })
    }
    doLast {
        exceptions.each {
            throw it
        }
    }
}

task pathingJar(type: Jar, description: "Produces a 'pathing' JAR whose manifest class-path contains project runtime dependencies") {
    dependsOn configurations.runtime
    appendix = "pathing"

    doFirst {
        manifest {
            attributes "Class-Path":
            configurations.runtime.files.collect {
                it.toURL().toString().replaceFirst("/file:/+/", "/")
            }
            .join(" ")
        }
    }
}

task testJar(type: Jar, dependsOn: testClasses, description: "archive the testClasses") {
    baseName = "${project.archivesBaseName}-tests"
    classifier = "tests"
    from sourceSets.test.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task resourcesJar(type: Jar) {
    classifier "resources"
    from project.file("src/main/resources")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

task cleanLogs(description: "Clean build log files") {
    delete fileTree(dir: project.projectDir, includes: ["**/*.log", "**/*.gz", "**/*.log.gz"])
}

task spotbugs(type: FindBugs, description: "Set up classpath for Findbugs") {
    pluginClasspath = project.configurations.spotbugsPlugins
}

task showConfiguration {
    doLast() {
        def cfg = project.hasProperty("configuration") ? project.property("configuration") : "compile"
        configurations.getByName(cfg).each { println it }
    }
}

task downloadDependencies {
    description "Pre-download project dependencies for all configurations"
    doLast {
        configurations.getAsMap().each { name, config ->
            logger.info "Retrieving dependencies for $project:$name"
            try {
                config.files
            } catch (e) {
                project.logger.info e.message
            }
        }
    }
}

task outputSpotbugsReports(description: "Display Findbugs output") {
    doLast {
        printSpotbugsReportToConsole(spotbugsMain.reports.xml.destination)
    }
}

def printSpotbugsReportToConsole(File file) {
    logger.debug "Reviewing file $file"
    if (file.exists()) {
        logger.debug "Processing file $file"
        def slurper = new XmlSlurper().parse(file)
        def bugsFound = slurper.BugInstance.size()
        if (bugsFound > 0) {
            println "*********************************\nFound Spotbugs rule violation(s):\n"
            slurper.BugInstance.each { bug ->
                println "*********************************"
                println "Bug (" + bug.@abbrev + "): " + bug.@type + " [" + bug.@priority + "-" + bug.@rank + "] @ category " + bug.@category
                bug.Class.each { clz ->
                    println "\tClass: " + clz.@classname 
                    clz.SourceLine.each { line ->
                        println "\tStart Line: " + line.@start + ", End Line: " + line.@end + ", Source Path: [" + line.@sourcepath  + "], Source File: [" + line.@sourcefile + "]"
                    }
                }
                println "\t----------------------METHOD-----------------------------"
                bug.Method.each { md ->
                    println "\tMethod: " + md.@name + " [static: " + md.@isStatic + "]"
                    println "\tSignature: " + md.@signature
                    md.SourceLine.each { line ->
                        println "\tStart Line: " + line.@start + ", End Line: " + line.@end
                    }
                }
                println "\t-------------------SOURCE LINE---------------------------"
                bug.SourceLine.each { line ->
                    println "\tStart Line: " + line.@start + ", End Line: " + line.@end + ", Class: [" + line.@classname + "]"
                }
            }
            def msg = "\n$bugsFound Spotbugs rule violation(s) were found. See the report at: $file"
            println msg
            if (!Boolean.getBoolean("ignoreFindbugsFailures")) {
                throw new GradleException(msg)
            }
        }
    }
}

gradle.buildFinished { buildResult ->
    cleanLogs
}

clean.dependsOn("cleanLogs")
